<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Aaron Kromer's Blog]]></title>
  <link href="http://cupakromer.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://cupakromer.github.com/"/>
  <updated>2014-09-29T12:12:47-04:00</updated>
  <id>http://cupakromer.github.com/</id>
  <author>
    <name><![CDATA[Aaron Kromer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Farewell JSON API gems]]></title>
    <link href="http://cupakromer.github.com/blog/2014-09-29-farewell-json-api-gems.html"/>
    <updated>2014-09-29T11:51:00-04:00</updated>
    <id>http://cupakromer.github.com/blog/farewell-json-api-gems</id>
    <content type="html"><![CDATA[<p>In the past, testing JSON APIs tended to be a bit painful for me. Most of this
pain revolved around setting expectations on the response body.</p>

<p>If you treat the response as a raw string, attempting to use regular
expressions ends up being an exercise in how you handle frustration. While a
JSON body is a string, it has structure. Using regular expressions for parsing
them is akin to using a hammer on a screw. It'll get the job done, but it's the
wrong tool for the job.</p>

<p>Ruby gives us <a href="http://ruby-doc.org/stdlib-2.1.3/libdoc/json/rdoc/JSON.html#method-i-parse"><code>JSON.parse</code></a>.
Which will convert a valid JSON string into a more familiar object structure.
Now comes the "fun" part of actually verifying that structure:</p>

<ul>
<li>Sometimes you only care about part of the response</li>
<li>Sometimes you care about validating the entire response</li>
<li>Sometimes the response is very complicated consisting of many smaller, more
logically meaningful, structures</li>
<li>Sometimes you only care about the general structure (e.g. this value must be
a number, that value must be either an empty array or an array of strings,
etc.)</li>
</ul>


<p>It is possible to do all of these validations out of the box. In my experience,
writing them tended to be tedious. Often the resulting code left something to
be desired in terms of readability. This was especially true when validating the
general response structure.</p>

<p>I like to follow the "one expectation per spec" guideline. However, this lead
to writing many small specs. Normally, this is perfectly fine and something I
advocate you do. However, in terms of a JSON response, it means I need to have
more discipline to keep everything explicitly organized.</p>

<p>Naturally in the Ruby community, many gems have sprouted up to help with this
problem set. I've had a bit of success with some of those gems in the past.
However, with the release of RSpec 3, <a href="http://myronmars.to/n/dev-blog/2014/01/new-in-rspec-3-composable-matchers">several new
features</a>
have eliminated my need for these JSON gems.</p>

<p>Expectations on a JSON response is a great fit for <a href="https://www.relishapp.com/rspec/rspec-expectations/v/3-0/docs/composing-matchers">composing
matchers</a>.
When I need to logically group checking several options, the <a href="https://www.relishapp.com/rspec/rspec-expectations/v/3-0/docs/compound-expectations">compound matchers</a>
are the perfect tool.</p>

<p>Often people don't realize that the matcher messages (i.e. <code>exist</code>, <code>be</code>, <code>eq</code>,
<code>include</code>, etc) are just factories. They are just helper methods which create
the matcher object for you. That means, we can easily write our own using our
app's domain language.</p>

<p>Let's jump right into an example!</p>

<p>These examples are assuming a JSON structure like one of the ones listed on the
<a href="http://jsonapi.org/format/#document-structure-compound-documents">jsonapi.org</a>
site. Though I am assuming integer value are represented as numbers and not
strings, since that is valid JSON and more meaningful:</p>

<p>```ruby</p>

<h1>Use common JSON helpers such as: <code>json_response</code>, <code>be_an_empty</code>, <code>all_match</code></h1>

<p>require 'support/json_api_helpers'</p>

<p>def be_kits_root_json
  be_kits_json.and(</p>

<pre><code>include(
  'meta' =&gt; {
    'first'   =&gt; anything,
    'last'    =&gt; anything,
    'current' =&gt; anything,
  }
)
</code></pre>

<p>  )
end</p>

<p>def be_kits_json
  include(</p>

<pre><code>'version' =&gt; '1.0',
'links'   =&gt; {
  'kits.beacons'       =&gt; "#{beacons_url}/{kits.beacons}",
  'kits.overlays'      =&gt; "#{overlays_url}/{kits.overlays}",
  'beacons.attributes' =&gt; "#{beacon_attributes_url}/{beacons.attributes}",
},
'kits'    =&gt; be_an_empty(Array).or(
  all_match(
    'id'        =&gt; Fixnum,
    'name'      =&gt; be_nil.or(be_a String),
    'api_token' =&gt; String,
    'account'   =&gt; be_nil.or(
      match(
        'id'   =&gt; Fixnum,
        'name' =&gt; be_nil.or(be_a String),
      )
    ),
    'links'     =&gt; {
      'self'     =&gt; /\A#{kits_url}\/\d+\z/,
      'beacons'  =&gt; be_an_empty(Array).or(all be_a Fixnum),
      'overlays' =&gt; be_an_empty(Array).or(all be_a Fixnum),
    },
  ),
),
</code></pre>

<p>  )
end</p>

<p>def include_linked_resources(*resources)
  resource_maps = resources.each_with_object({}) { |resource, mappings|</p>

<pre><code>mappings.store(resource.to_s, be_an(Array))
</code></pre>

<p>  }
  include('linked' => resource_maps)
end</p>

<p>context "a basic user", "with a kit having no beacons or maps" do
  # Setup world state</p>

<p>  describe "requesting the kits root" do</p>

<pre><code>it "conforms to the expected JSON structure" do
  get kits_path, *options
  expect(json_response).to be_kits_root_json
end

# More specific specs
</code></pre>

<p>  end</p>

<p>  describe "requesting a kit" do</p>

<pre><code>it "conforms to the expected JSON structure" do
  get kit_path(kit), *options
  expect(json_response).to be_kits_json
end

# More specific specs
</code></pre>

<p>  end
end</p>

<h1>More state specs</h1>

<p>context "a developer user", "sending request with parameter 'include'" do
  # Setup world state</p>

<p>  describe "requesting the kits root" do</p>

<pre><code>it "conforms to the expected JSON structure with included resources" do
  get kits_path(include: "beacons,beacon_attributes"), *options
  expect(json_response).to be_kits_root_json.and(
    include_linked_resources(:beacons, :beacon_attributes)
  )
end
</code></pre>

<p>  end</p>

<p>  describe "requesting a beacon" do</p>

<pre><code>it "conforms to the expected JSON structure with included resources" do
  get kit_path(kit, include: "beacons,beacon_attributes"), *options
  expect(json_response).to be_kits_json.and(
    include_linked_resources(:beacons, :beacon_attributes)
  )
end
</code></pre>

<p>  end
end
```</p>

<p>The possibilities are fairly endless. We could improve this further by allowing
the factories to take model instances or attribute hashes. We can use those to
check specific content when available:</p>

<p>```ruby
def account_resource(account = nil, allow_nil: false)
  return nil unless account || !allow_nil
  if account</p>

<pre><code>{
  'id'   =&gt; account.id,
  'name' =&gt; account.name
}
</code></pre>

<p>  else</p>

<pre><code>{
  'id'   =&gt; Fixnum,
  'name' =&gt; be_nil.or(be_a String),
}
</code></pre>

<p>  end
end</p>

<p>def kit_resource(kit = nil, allow_nil: false)
  return nil unless kit || !allow_nil
  if kit</p>

<pre><code>{
  'id'        =&gt; kit.id,
  'name'      =&gt; kit.name,
  'api_token' =&gt; kit.api_token,
  'account'   =&gt; account_resource(kit.account, allow_nil: true),
}
</code></pre>

<p>  else</p>

<pre><code>{
  'id'        =&gt; Fixnum,
  'name'      =&gt; be_nil.or(be_a String),
  'api_token' =&gt; String,
  'account'   =&gt; be_nil.or(match account_resource),
}
</code></pre>

<p>  end
end</p>

<p>context "a basic user", "with a kit having no beacons or maps" do
  # Setup world state</p>

<p>  describe "requesting the kits root" do</p>

<pre><code>it "conforms to the expected JSON structure" do
  get kits_path, *options
  expect(json_response).to be_kits_root_json
end

it "has only the expected kit" do
  get kits_path, *options
  expect(json_response).to include 'kits' =&gt; [kit_resource(basic_users_kit)]
end
</code></pre>

<p>  end</p>

<p>  describe "requesting a beacon" do</p>

<pre><code>it "conforms to the expected JSON structure" do
  get kit_path(kit), *options
  expect(json_response).to be_kits_json(basic_users_kit)
end
</code></pre>

<p>  end
end
```</p>

<p>Happy RSpec'ing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pitfalls of Testing Scripts With Load - Part 2]]></title>
    <link href="http://cupakromer.github.com/blog/2014-02-17-pitfalls-of-testing-scripts-with-load-part-2.html"/>
    <updated>2014-02-17T10:15:00-05:00</updated>
    <id>http://cupakromer.github.com/blog/pitfalls-of-testing-scripts-with-load-part-2</id>
    <content type="html"><![CDATA[<p>File /Users/aaron/dev/cupakromer/cupakromer.github.com/source/<em>posts/</em>pitfalls_of_test_load_posts.md could not be found</p>

<h2>Scope Smashing</h2>

<p>Take the following script and spec:</p>

<p>```ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>def current_user
  'Bob'
end
```</p>

<p>```ruby
require 'spec_helper'</p>

<p>def current_user
  'Alice'
end</p>

<p>describe 'Running the server locally' do
  it 'logs that it is running' do</p>

<pre><code>load 'script/current-user-smash'

expect(current_user).to eq 'Alice'
</code></pre>

<p>  end
end
```</p>

<p>Alas, the spec fails with:</p>

<p>```
expected: "Alice"</p>

<pre><code> got: "Bob"
</code></pre>

<p>```</p>

<p>This is due to how <a href="http://ruby-doc.org/core-2.1.0/Kernel.html#method-i-load"><code>load</code></a> works:</p>

<blockquote><p>If the optional <code>wrap</code> parameter is <code>true</code>, the loaded script will be
executed under an anonymous module, protecting the calling programâ€™s global
namespace. In no circumstance will any local variables in the loaded file be
propagated to the loading environment.</p></blockquote>

<p>While it is easy to spot the issue this time, that's not normally the case.
Say if the additional method is define by a gem or in supporting file. Or if
you are testing multiple scripts that each define the same top-level methods.
These conditions will result in very strange and difficult to debug failures.
Of course, it's always a good idea to not define top-level methods to begin
with.</p>

<p>Instead always pass the additional <code>wrap</code> parameter. Here I've named it as a
descriptive inline variable to reveal it's intent:</p>

<p>```ruby
it 'logs that it is running' do
  load 'script/current-user-smash', _in_sandbox = true</p>

<p>  expect(current_user).to eq 'Alice'
end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Discussion about open classes and monkey patching at #retroruby]]></title>
    <link href="http://cupakromer.github.com/blog/2014-02-06-open-classes-and-monkey-patching-at-retroruby.html"/>
    <updated>2014-02-06T15:28:00-05:00</updated>
    <id>http://cupakromer.github.com/blog/open-classes-and-monkey-patching-at-retroruby</id>
    <content type="html"><![CDATA[<p>While at <a href="http://retroruby.org">RetroRuby 2014</a> a very good question was asked
in the newbie track. The following code sample had just been shown on some
basic awesomeness of Ruby:</p>

<p>```ruby
"Words" * 2</p>

<h1>=> "WordsWords"</h1>

<p>```</p>

<p>One of the participants then asked why that worked but the inverse didn't:</p>

<p>```ruby
2 * "Words"</p>

<h1>TypeError: String can't be coerced into Fixnum</h1>

<p>```</p>

<h2>Oops what just happened?</h2>

<p>In Ruby, virtually everything is accomplished by sending a message to another
object. Above we would say:</p>

<blockquote><p><em>Send the message <code>*</code> to <code>"Words"</code> with parameter <code>2</code></em></p>

<p><em>Send the message <code>*</code> to <code>2</code> with parameter <code>"Words"</code></em></p></blockquote>

<p>"Sending a message" is the Java equivalent of calling a method. Another way to
write the above is:</p>

<p>```ruby
"Words".*(2)</p>

<h1>=> "WordsWords"</h1>

<p>```</p>

<p>Here we used the normal "method" calling syntax: <code>obj.method(args)</code></p>

<p>You'll also probably see the following:</p>

<p>```ruby
"Words".send(:*, 2)</p>

<h1>=> "WordsWords"</h1>

<p>```</p>

<p>This time we explicitly sent the message: <code>obj.send(message, args)</code></p>

<p>With <a href="http://ruby-doc.org/core-2.1.0/Object.html#method-i-send"><code>send</code></a> Ruby
doesn't check if the message you passed was supposed to be public or private.
Generally, what you wanted to do was dynamically send the message while still
making sure to respect the public API of the object. To do this you should use
<a href="http://ruby-doc.org/core-2.1.0/Object.html#method-i-public_send"><code>public_send</code></a>
instead: <code>obj.public_send(message, args)</code>.</p>

<p>So back to the original issue. Both
<a href="http://ruby-doc.org/core-2.1.0/String.html"><code>String</code></a> and
<a href="http://ruby-doc.org/core-2.1.0/Fixnum.html"><code>Fixnum</code></a> respond to the message
<code>*</code>.</p>

<ul>
<li><a href="http://ruby-doc.org/core-2.1.0/String.html#method-i-2A"><code>String#*</code></a></li>
<li><a href="http://ruby-doc.org/core-2.1.0/Fixnum.html#method-i-2A"><code>Fixnum#*</code></a></li>
</ul>


<p>However, <code>String</code>'s implementation knows what to do when the argument is a
<code>Fixnum</code>. When we reverse it, the <code>Fixnum</code> implementation doesn't understand
what to do with a <code>String</code> argument.</p>

<h2>How to fix this?</h2>

<p>Well you probably shouldn't. But just for fun we'll use Ruby's open class
behavior to monkey patch <code>Fixnum</code>'s <code>*</code> implementation.</p>

<p>```ruby
class Fixnum # We just re-opened the class</p>

<p>  def *(arg) # We're redefining the * message - this destroys the</p>

<pre><code>         # previous implementation!!!
arg * self
</code></pre>

<p>  end</p>

<p>end</p>

<p>2 * "Words"</p>

<h1>=> WordsWords</h1>

<p>```</p>

<p>It worked!! Before you go doing this to everything, be aware we've now lost the
ability to do normal multiplication. Additionally, we'll overflow the stack
trying to multiply two <code>Fixnum</code>s.</p>

<p>```ruby
2 * 2</p>

<h1>SystemStackError: stack level too deep</h1>

<p>```</p>

<h2>Wrap Up</h2>

<p>In Ruby, most things are messages sent from one object to another. Some times
the language gives a little extra syntactic sugar to make sending the message
more readable.</p>

<p>Additionally, open classes and monkey patching have their uses. Just be aware
that with great power comes great responsibility. Always stop to ask yourself
if this is really a good idea; and try to never change existing behavior if you
can.</p>

<h2>Level Up!</h2>

<p>So what if we just wanted to extend the existing functionality.  There are a
lot of ways to do this and covering each, along with the pros and cons is very
out of scope for this post. I'm just going to demonstrate one way to illustrate
how it could be done.</p>

<p>You'll need a new irb or Pry session so we get the original implementation for
<code>Fixnum</code> back.</p>

<p>```ruby
class Fixnum # We just re-opened the class</p>

<p>  # We need to store a reference to the original implementation One way to do
  # this is to create an alias for the original implementation so we can call
  # it later. Be sure to pick a descriptive name so that it isn't accidentally
  # overwritten by something else.
  alias :star_without_string_support :*</p>

<p>  def *(arg) # Redefine the message destroying the previous implementation!!!</p>

<pre><code>if arg.is_a? String
  arg * self
else
  star_without_string_support arg  # use the original implementation
end
</code></pre>

<p>  end</p>

<p>end
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live-ing Dangerously with Rails]]></title>
    <link href="http://cupakromer.github.com/blog/2013-12-10-live-ing-dangerously-with-rails.html"/>
    <updated>2013-12-10T13:08:00-05:00</updated>
    <id>http://cupakromer.github.com/blog/live-ing-dangerously-with-rails</id>
    <content type="html"><![CDATA[<p>Recently at work, we've been spinning up a bunch of demo apps on Heroku. This
has worked out well for us so far. However, some of these apps require
background data crunching. This hasn't been a problem as we just add a Rake
task, or two, and set the Heroku scheduler to take care of things.</p>

<p>Then comes the day when the sales team says:</p>

<blockquote><p>"Oh hey. Can we re-run all the numbers but with different configurations?"</p></blockquote>

<p>Sure, that's not a problem you think:</p>

<p><code>bash
$ heroku run rake redo_all_the_things[config.yml]
</code></p>

<p>However, there's a few issues with this:</p>

<ol>
<li>The <code>config.yml</code> needs to be on Heroku</li>
<li>This counts against your active dyno time</li>
</ol>


<p>See the thing is, Heroku <a href="https://devcenter.heroku.com/articles/read-only-filesystem">doesn't let you create files</a>
that aren't already in your VC system from outside the app. It's now
<a href="https://devcenter.heroku.com/articles/dynos#ephemeral-filesystem">sorta possible on Cedar</a>,
but not really for this purpose.</p>

<p>Additionally, if these tasks turn out to be long running, that'll quickly eat
up the overhead on the 'free' dyno. For demo apps of non-paying customers
that's not always an option.</p>

<p>Enter the <code>live</code> environment.</p>

<p>Just add a new <code>live</code> environment to the Rails application. This allows us to
run Rake locally, but against the production database. Additionally, allowing
for custom configuration files to just be stored on our local system. And we
don't spin up a new dyno on Heroku.  Win, win!</p>

<p>To set this up:</p>

<ul>
<li>Update the <code>Gemfile</code></li>
</ul>


<p>```ruby</p>

<h1>Gemfile</h1>

<h1>We use dotenv-rails to help manage environment configs locally.</h1>

<h1>Add our new environment:</h1>

<p>gem 'dotenv-rails', groups: [:development, :test, :live]
```</p>

<ul>
<li>Add the live specific sample file: <code>.env.live-example</code></li>
</ul>


<p>```ruby</p>

<h1>.env.live-example</h1>

<h1>Rename this file to <code>.env.live</code> and it will be automatically sourced by</h1>

<h1>rails. Uncomment the settings for them to be picked up.</h1>

<p>#</p>

<h1>Grab the settings from the output of:</h1>

<p>#</p>

<h1>$ heroku config</h1>

<p>#</p>

<h1>Running against the Heroku production DB directly</h1>

<h1>BE CAREFUL!! YOU HAVE BEEN WARNED!!</h1>

<h1>DATABASE_NAME=WARNING</h1>

<h1>DATABASE_HOST=DANGER</h1>

<h1>DATABASE_PORT=WILL</h1>

<h1>DATABASE_USER=ROBINSON</h1>

<h1>DATABASE_PASSWORD=SERIOUSLY</h1>

<p>```</p>

<ul>
<li>Update the <code>database.yml</code> file</li>
</ul>


<p>```yaml</p>

<h1>config/database.yml</h1>

<p>live:
  adapter: postgresql
  encoding: unicode
  database: &lt;%= ENV['DATABASE_NAME'] %>
  host: &lt;%= ENV['DATABASE_HOST'] %>
  port: &lt;%= ENV['DATABASE_PORT'] %>
  username: &lt;%= ENV['DATABASE_USER'] %>
  password: &lt;%= ENV['DATABASE_PASSWORD'] %>
```</p>

<ul>
<li>Copy <code>config/environments/production.rb</code> to <code>config/environments/live.rb</code>.
If you wish to symlink it instead <a href="http://stackoverflow.com/questions/954560/what-does-git-do-to-files-that-are-a-symbolic-link">be wary of how git treats that</a>.</li>
</ul>


<p>Now running our tasks is as simple as:</p>

<p><code>bash
$ RAILS_ENV=live rake redo_all_the_things[config-fun-edition.yml]
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pitfalls of Testing Scripts With Load - Part 1]]></title>
    <link href="http://cupakromer.github.com/blog/2013-07-29-pitfalls-of-testing-scripts-with-load-part-1.html"/>
    <updated>2013-07-29T13:29:00-04:00</updated>
    <id>http://cupakromer.github.com/blog/pitfalls-of-testing-scripts-with-load-part-1</id>
    <content type="html"><![CDATA[<p>File /Users/aaron/dev/cupakromer/cupakromer.github.com/source/<em>posts/</em>pitfalls_of_test_load_posts.md could not be found</p>

<p>Previously it was shown how to <a href="http://aaronkromer.com/blog/2013-07-11-testing-scripts-with-load.html">use load to test scripts</a>. As with all techniques, there are some drawbacks to using <code>load</code>.</p>

<h2>Hidden Require Dependency</h2>

<p>Take script:</p>

<p>```ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>$:.unshift File.join File.dirname(<strong>FILE</strong>), "..", "lib"</p>

<p>require 'local_server'</p>

<p>logger = Logger.new($stderr)</p>

<p>LocalServer.new(logger).run
```</p>

<p>and passing spec:</p>

<p>```ruby
require 'spec_helper'
require 'logger'
require 'stringio'</p>

<p>describe 'Running the server locally' do
  it 'logs that it is running' do</p>

<pre><code>io = StringIO.new
allow(Logger).to receive(:new).and_return(Logger.new io)

expect{ load 'script/local-server' }.to change{ io.string }
  .to include 'SERVER: starting up'
</code></pre>

<p>  end
end
```</p>

<p>However, when the script is run standalone, it errors with:</p>

<p><code>
uninitialized constant Logger (NameError)
</code></p>

<p>Be aware that since <a href="http://ruby-doc.org/core-2.0/Kernel.html#method-i-load"><code>load</code></a>
happens in the current spec context, a missing <code>require</code> may not be noticed if
it is required by the spec.</p>

<p>Whenever possible have at least one test that shells out as a sanity check.</p>
]]></content>
  </entry>
  
</feed>
