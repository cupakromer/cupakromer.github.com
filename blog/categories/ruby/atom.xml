<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Aaron Kromer's Blog]]></title>
  <link href="http://cupakromer.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://cupakromer.github.com/"/>
  <updated>2013-07-05T11:17:33-04:00</updated>
  <id>http://cupakromer.github.com/</id>
  <author>
    <name><![CDATA[Aaron Kromer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Bang is for Surprise]]></title>
    <link href="http://cupakromer.github.com/blog/2013-05-19-the-bang-is-for-surprise.html"/>
    <updated>2013-05-19T21:20:00-04:00</updated>
    <id>http://cupakromer.github.com/blog/the-bang-is-for-surprise</id>
    <content type="html"><![CDATA[<p><strong><em>Note:</em></strong> I'm using Ruby 2.0.0 and RSpec 2.13.1 for these samples. Behavior
may be slightly different in older versions. YMMV!</p>

<p>One of the more well known features of <a href="github.com/rspec/rspec-core">RSpec</a> is
<a href="https://www.relishapp.com/rspec/rspec-core/v/2-13/docs/helper-methods/let-and-let!"><code>let</code></a>.
It provides a way to create a variable as a
<a href="http://devblog.avdi.org/2012/10/01/barewords/">bareword</a> which is lazy loaded
and memoized.</p>

<p>It also has a sibling <code>let!</code>. On the surface, <code>let!</code> is just a <code>let</code> without
the lazy loading. So any variable defined with a <code>let!</code> will always be created
before a test. This tool has a few nuances that should be know before you reach
for it.</p>

<p>Take the following sample. <em>What do you think the result will be?</em></p>

<p>```ruby
describe "Which one wins?" do</p>

<p>  let!(:sample) { "using let bang!" }</p>

<p>  context "inside a context" do</p>

<pre><code>let(:sample) { "normal let" }

it { expect(sample).to eq "normal let" }
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>The test passes. This may or may not have been surprising. The rules for nested
<code>let</code>s, is that the <code>let</code> defined closet to the test in the hierarchy wins.
But, didn't I say <code>let!</code> always created the object which was then memoized?</p>

<p>I'll get to more about how <code>let</code> and <code>let!</code> are implemented in a minute. For
now, I want to point out a subtle surprise waiting for you; or possibly bring
to light that nagging itch at the back of your brain.</p>

<p>```ruby
describe "Using Conflicting Let and Let!" do</p>

<p>  let!(:user) { create :user, name: 'bob' }</p>

<p>  # LOTS OF CODE SO YOU CAN'T SEE THE ABOVE LINE</p>

<p>  context "inside a context" do</p>

<pre><code>let(:user) { create :user, name: 'alice' }

# Will this pass?
it do
  expect(User.count).to eq 0
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Surprise! The test fails:</p>

<p>```text
  1) Which one wins? inside a context</p>

<pre><code> Failure/Error: expect(User.count).to eq 0

   expected: 0
        got: 1

   (compared using ==)
</code></pre>

<p>```</p>

<p><a href="https://www.destroyallsoftware.com/talks/wat"><strong>WAT?</strong></a></p>

<p><code>user</code> was never explicitly referenced in our test or a <code>before</code> block. Above I
also stated that the <code>let</code> closest to the test <em>wins</em>. Theoretically, by these
rules one would naturally think the test would have passed. Yet, someone was
created in the database.</p>

<p><em>Which user definition do you think was created?</em></p>

<p>If we dump the <code>User</code> collection before the <code>expect</code> line we see:</p>

<p><code>ruby
[&lt;User id: 1, name: "alice", ...&gt;]
</code></p>

<p>Not only did the inner normal <code>let</code> block appear to override the outer, the
outer <code>let!</code> behavior took affect!</p>

<p>Let's try one more:</p>

<p>```ruby
describe "Using Conflicting Nested Let!" do</p>

<p>  let!(:user) { create :user, name: 'bob' }</p>

<p>  context "inside a context" do</p>

<pre><code># Now we'll use the bang version here
let!(:user) { create :user, name: 'alice' }

# Will this pass?
it do
  expect(User.count).to eq 1
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>Surprise! It passes:</p>

<p>```text
Using Conflicting Nested Let!
  inside a context</p>

<pre><code>should eq 1
</code></pre>

<p>Finished in 0.02185 seconds
1 example, 0 failures
```</p>

<p>Again, dumping the user created we see our good friend Alice:</p>

<p><code>ruby
[&lt;User id: 1, name: "alice", ...&gt;]
</code></p>

<p>If you're scratching your brain right now. Don't worry. I did too the first
time.  However, once we cover what is happening behind that curtain things will
make perfect sense.</p>

<h2>How <code>let</code> and <code>let!</code> Work</h2>

<p>"<strong><em>Pay <del>[no]</del> attention</em></strong> to that man behind the curtain!"
- <a href="http://en.wikiquote.org/wiki/The_Wizard_of_Oz#The_Wizard">The Wizard</a></p>

<p>The reason for this behavior, remember I'm using RSpec 2.13, is that <code>let!</code>
just calls <code>let</code> and <code>before</code> <a href="https://github.com/rspec/rspec-core/blob/5baa615d/lib/rspec/core/memoized_helpers.rb#L257">behind the scenes</a>:</p>

<p><code>ruby
def let!(name, &amp;block)
  let(name, &amp;block)
  before { __send__(name) }
end
</code></p>

<p>And all
<a href="https://github.com/rspec/rspec-core/blob/5baa615d/lib/rspec/core/memoized_helpers.rb#L195"><code>let</code></a>
does is setup a memoized method based on the name and provided block:</p>

<p>```ruby
MemoizedHelpers.module_for(self).send(:define_method, name, &amp;block)</p>

<p>define_method(name) do
  <strong>memoized.fetch(name) { |k| </strong>memoized[k] = super(&amp;nil) }
end
```</p>

<h3><em>"Using Conflicting Let and Let!"</em> Explained</h3>

<p>Going back to the example <em>"Using Conflicting Let and Let!"</em> above, where both
<code>let!</code> and <code>let</code> were used. It should be a bit clearer what is really going on.</p>

<p>When the test runs, the <code>let!</code> has already created the <code>before</code> block, which
will send the message <code>:user</code>. However, the inner context's <code>let</code> created a new
method with the same name. Thus based on standard Ruby method lookup, when the
<code>before</code> block runs the inner method receives the message:</p>

<p>```ruby
describe "Using Conflicting Let and Let!" do</p>

<p>  # Expanding the following out:
  # let!(:user) { create :user, name: 'bob' }
  def user</p>

<pre><code>create :user, name: 'bob'
</code></pre>

<p>  end
  before{ user }</p>

<p>  context "inside a context" do</p>

<pre><code># Expanding the following out:
# let(:user) { create :user, name: 'alice' }
def user
  create :user, name: 'alice'
end

# The outer `before` block will run before this example.
# Due to the examples being objects, the inner
# `def user` will receive the `:user` message sent
# by `before`.
it do
  expect(User.count).to eq 0
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<h3><em>"Using Conflicting Nested Let!"</em> Explained</h3>

<p>It should also start to make sense what was going on with the <em>"Using
Conflicting Nested Let!"</em> example:</p>

<p>```ruby
describe "Using Conflicting Nested Let!" do</p>

<p>  # Expanding the following out:
  # let!(:user) { create :user, name: 'bob' }
  def user</p>

<pre><code>create :user, name: 'bob'
</code></pre>

<p>  end
  before{ user }</p>

<p>  context "inside a context" do</p>

<pre><code># Now we'll use the bang version here
# Expanding the following out:
# let!(:user) { create :user, name: 'alice' }
def user
  create :user, name: 'alice'
end
before{ user }

# The outer `before` block will run before this example.
# Due to the examples being objects, the inner
# `def user` will receive the `:user` message sent
# by the outer `before`.
#
# The inner `before` block will run next, also sending
# the message `:user`. This is also received by the
# inner example object. However, since `let` is also
# memoized, this doesn't actually execute the `:create`.
# It just returns the already created object.
it do
  expect(User.count).to eq 1
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<h3>It's Just a Method</h3>

<p>I hope that helps demystify the behavior.</p>

<p>Since <code>let</code> is just a helper for setting up methods on the <a href="http://interblah.net/how-rspec-works">example group object</a>
you can call <code>super</code> in it; though this is generally not an advised practice.</p>

<p>```ruby
describe "Just a Method" do</p>

<p>  let!(:sample) { "using let bang!" }</p>

<p>  context "using super()" do</p>

<pre><code>let(:sample) {
  p super()
  "normal let"
}

it { expect(sample).to eq "normal let" }
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>```text
Just a Method
  using super()
"using let bang!"</p>

<pre><code>should eq "normal let"
</code></pre>

<p>```</p>

<h2>Avoiding Ambiguity</h2>

<p>Since that tiny little <code>!</code> can be hard to see, especially in a sea of <code>let</code>
declarations, it is easy to miss it and get surprised. Additionally, seeing as
how mixing <code>let!</code> and <code>let</code> can lead to some surprises, it's fairly clear why
<code>let!</code> has started, rightly so in my opinion, to fall out of favor with some of
the RSpec crowd.</p>

<p>Luckily, there should be very few situations you should find yourself in where
you want to reach for <code>let!</code> over <code>let</code>. For me, this is usually a situation
where I'm creating some sort of persisted resource. For instance, the factory
example, or creating a test file on the system.</p>

<h2>Options For Preloading</h2>

<p>If people are moving away from using <code>let!</code>, how should you preload variables?</p>

<h3>Reference in <code>before</code></h3>

<p>Call them just like RSpec does in a <code>before</code>:</p>

<p>```ruby
let(:bob)   { create :user, name: 'bob'   }
let(:alice) { create :user, name: 'alice' }</p>

<p>before do
  bob
  alice
end
```</p>

<p>To me this looks a bit odd. People I've talked to tend to have two reactions:</p>

<ol>
<li>Why are you referencing a <em>'variable'</em> and not using it?</li>
<li>Wouldn't it be a bit more explicit to show the creation using an <code>@var</code>?</li>
</ol>


<p>By now you should know that the first response indicates a lack of understand on
how RSpec works. They aren't variables, they are actually bareword messages.</p>

<p>The second response is a valid point. The result would be:</p>

<p><code>ruby
before do
  @bob   = create :user, name: 'bob'
  @alice = create :user, name: 'alice'
end
</code></p>

<p>This goes back to preference and style. My preference is to reach for a
bareword whenever I can. One reason is that, when using an instance variables
you are now locked in to how both <code>@bob</code> and <code>@alice</code> are created. If you later
wanted to modify them, you could but at the expense of already having created
the persisted resource; remember <code>before</code> blocks execute outside-in (this isn't
so much of an issue for lightweight objects). Or you have to roll your own
memoization scheme (not hard just duplication of work).</p>

<h3>Use a method</h3>

<p>The next common thing I see done is people say: <em>"I'll just wrap it all up in a
method."</em></p>

<p>```ruby
def create_users
  @bob   = create :user, name: 'bob'
  @alice = create :user, name: 'alice'
end</p>

<p>before { create_users }
```</p>

<p>Now the <code>before</code> looks better; it's explicit what is happening. However, the
new <code>create_users</code> method looks just like our old <code>before</code>. So this really just
added one level of indirection.  The main advantage here is if we need to
change the behavior we can just write a new <code>create_users</code> method in an inner
context. We could also use barewords by making our variables into methods:</p>

<p>```ruby
def bob
  @bob ||= create :user, name: 'bob'
end</p>

<p>def alice
  @alice ||= create :user, name: 'alice'
end</p>

<p>def create_users
  bob
  alice
end</p>

<p>before { create_users }
```</p>

<p>Though now we've duplicated the lazy loading and memoizing logic already
provided by <code>let</code>.</p>

<p>At this point, you'll probably say, we can make this a bit more explicit and
clean it up at the same time:</p>

<p>```ruby
def bob
  @bob ||= create :user, name: 'bob'
end</p>

<p>def alice
  @alice ||= create :user, name: 'alice'
end</p>

<p>def create_users(*users)
  users.each{ |user| public_send user }
end</p>

<p>before { create_users :bob, :alice }
```</p>

<p>This brings me to my next option.</p>

<h3>Explicit Preload</h3>

<p>Now there's nothing inherently wrong with the above methods. However, to me
they add a lot of work, without adding much additional value. There are still
cases where I'll break out the generator method as it's a very useful tool. But
this section is about another option, so I'll get to it.</p>

<p>Having gone through the cycle of improvement the <em>"hard"</em> way, it's time to
show you the shortcut. To me, this is reminiscent of high school calculus
class where the teacher made me do everything the difficult, time consuming
way, for a week before teaching how it's usually done with the shorter method.</p>

<p>Since pretty much everything in RSpec is already just a method, we can leverage
that to get our desired behavior. This was discussed in a <a href="https://github.com/rspec/rspec-core/pull/815#issuecomment-14446077">pull request</a>:</p>

<p>```ruby
module LetPreloadable
  def preload(*names)</p>

<pre><code>before do
  names.each { |name| __send__ name }
end
</code></pre>

<p>  end
end</p>

<p>RSpec.configure do |rspec|
  rspec.extend LetPreloadable
end
```</p>

<p>You can place the module code anywhere you want (usually in <code>spec/support</code>).
Then you'll load it in a <code>RSpec.configure</code> block either in the same file or in
<code>spec_helper.rb</code>.</p>

<p>Our setup now looks like:</p>

<p>```ruby
let(:bob)   { create :user, name: 'bob'   }
let(:alice) { create :user, name: 'alice' }</p>

<p>preload :bob, :alice
```</p>

<p>Going back to our original example. There is now more context to what is
happening without the confusing mix of <code>let</code> and <code>let!</code>:</p>

<p>```ruby
describe "No More Conflicting Let and Let!" do</p>

<p>  let(:user) { create :user, name: 'bob' }</p>

<p>  preload :user</p>

<p>  context "inside a context" do</p>

<pre><code>let(:user) { create :user, name: 'alice' }

it do
  expect(User.count).to eq 1
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<h2>Introducing <a href="https://github.com/cupakromer/conjurer"><code>Conjurer</code></a> Gem</h2>

<p>I've started using this in enough new projects that I wanted an easy way to
just add it. I also wanted to be able to include any changes easily. Thus, I've
rolled it all up into a gem: <a href="http://rubygems.org/gems/conjurer"><code>conjurer</code></a></p>

<p><strong>Happy RSpecing!!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quirky Privates]]></title>
    <link href="http://cupakromer.github.com/blog/2013-01-07-quirky-privates.html"/>
    <updated>2013-01-07T20:35:00-05:00</updated>
    <id>http://cupakromer.github.com/blog/quirky-privates</id>
    <content type="html"><![CDATA[<p>Just one of those little Ruby language quirks. Normally, you have to use
the implicit receiver when sending a <code>private</code> message. This can be
demonstrated as follows:</p>

<p>```ruby
class Quirky
  def send_private_explicitly</p>

<pre><code>self.say_hello    # =&gt; NoMethodError: private method 'say_hello'
</code></pre>

<p>  end</p>

<p>  def send_private_implicitly</p>

<pre><code>say_hello         # =&gt; "Hi there friend!"
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def say_hello</p>

<pre><code>puts "Hi there friend!"
</code></pre>

<p>  end
end
```</p>

<p>However, this is not true when sending a message that ends in <code>=</code>. In
this case you <em>must</em> use the explicit receiver <code>self</code>.</p>

<p>```ruby
class Quirky
  def send_private_setter_explicitly</p>

<pre><code>self.store_value = 'friend'     # =&gt; @private_value='friend'
store_value                     # =&gt; "Let's get our private value"
</code></pre>

<p>  end</p>

<p>  def send_private_setter_implicitly</p>

<pre><code>store_value = 'friend'          # =&gt; @private_value is not set
store_value                     # =&gt; 'friend'
</code></pre>

<p>  end</p>

<p>  private</p>

<p>  def store_value=(value)</p>

<pre><code>@private_value = value
</code></pre>

<p>  end</p>

<p>  def store_value</p>

<pre><code>puts "Let's get our private value"
</code></pre>

<p>  end
end
```</p>

<p>In fact, without the explicit reciever <code>self</code> when sending a private
message ending in <code>=</code>, you will instead create a local variable with
that name. This is then the reference point for the rest of the method
body.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Basic RSpec Works - Simplified]]></title>
    <link href="http://cupakromer.github.com/blog/2012-12-09-how-basic-rspec-works-simplified.html"/>
    <updated>2012-12-09T20:15:00-05:00</updated>
    <id>http://cupakromer.github.com/blog/how-basic-rspec-works-simplified</id>
    <content type="html"><![CDATA[<p>Recently, I had the privilege of giving a talk regarding
<a href="http://rspec.info">RSpec</a> at the
<a href="http://www.meetup.com/Arlington-Ruby/">Arlington Ruby</a> meetup group.
The talk was about RSpec and how you can take some next steps with it
(slides here: <a href="http://rspec-next-steps.herokuapp.com">http://rspec-next-steps.herokuapp.com</a>.</p>

<p>The talk was targeted at intermediate RSpec users. There were several in
attendance whom were fairly new to RSpec. This made some of the talk
seem like "magic". Based on the questions I received, I wanted to take a
moment to address some of the general workings of RSpec, in order to
dispel any "magic" that may seem to be happening.</p>

<p>It is my hope to try to show how <em>some</em> of this works. I won't be
covering any of the more advanced topics just yet, as the code can get a
bit complicated, and the point here is to simplify how RSpec works. So
bare with me and the overly simplistic implementation. The full code is
available in the following GitHub gist:
<a href="https://gist.github.com/4247624">https://gist.github.com/4247624</a></p>

<p>First, we need to setup some methods that define the basic usage of
RSpec: <code>describe</code>, <code>subject</code>, <code>before</code>, <code>after</code>, and <code>it</code>.</p>

<p>First up is the outer <code>describe</code>:</p>

<p><code>ruby
def describe(object_under_test, &amp;block)
  @obj_under_test = object_under_test
  @test_group     = block
end
</code></p>

<p>In this example we are specifically only supporting a single <code>describe</code>
block with no nesting. The reason here is for simplicity.  In our case
<code>describe</code> is just a method that takes an object or description string
and block. Nothing special. Hopefully, this helps make it clear that we
are only dealing with a DSL for creating / setting up examples. We'll
store away the test object in an instance variable and keep a reference
to the block for later.</p>

<p>Next, we setup a method for gaining access to subject:</p>

<p>```ruby
def subject
  if @obj_under_test.is_a? Class</p>

<pre><code>@subject ||= @obj_under_test.new
</code></pre>

<p>  else</p>

<pre><code>@obj_under_test
</code></pre>

<p>  end
end
```</p>

<p>If our subject is a <code>class</code>, we create a new memoized instance of it.
Otherwise, we simply return the object itself.</p>

<p>Next is the commonly used <code>before</code> blocks and the associated <code>after</code>
friend:</p>

<p><code>ruby
def before(&amp;block) @before_hooks &lt;&lt; block end
def after(&amp;block)  @after_hooks  &lt;&lt; block end
</code></p>

<p>In this simplistic implementation, it is easy to see how they work. We
just keep a reference to all of the block in a normal array (in Ruby the
order of insertion is preserved) for use later. We do the same with
<code>after</code>.</p>

<p>Last up, is the real meat of the examples, the <code>it</code> block:</p>

<p>```ruby
def it(description = nil, &amp;block)
  @examples &lt;&lt; Example.new(description, block)
end</p>

<p>Example = Struct.new(:description, :test) do
  attr_accessor :result, :failure
  def call</p>

<pre><code>@result = if test
            begin
              test.call
              :passed
            rescue =&gt; e
              @failure = e
              :failed
            end
          else
            :pending
          end
</code></pre>

<p>  end
end
```</p>

<p>As with the <code>describe</code> method, this takes an optional description and a
block to execute (our actual test). We'll need access to both of these
later, and we'll have multiple examples, so we'll use a simple object to
keep track of each.  After creating the example object, we'll store it
in the queue.</p>

<p>At this point it is worth taking a moment to discuss <code>Example#call</code>. We
named it <code>call</code> so that accessing it is no different than a traditional
block. This makes it easier to change code later.</p>

<p>Inside <code>Example#call</code>, we attempt to pass <code>call</code> on the block that the
<code>Example</code> was created with. If this raises an error, we store the
exception for access later and mark the test as <code>failed</code>. Something to
note here is that the return value of the <code>test</code> block is ignored. A
test is marked as <code>passed</code> as long as it does not <code>raise</code> any errors.
This is also how RSpec behaves.</p>

<p>If no block was given when we created the <code>Example</code>, then we treat it as
<code>pending</code>.  I have omitted the <code>pending</code> method, common in RSpec due to
the complexity it would add to this example.</p>

<p>Something else to note, since this is an overly simplistic example, we
are doing everything in the global main namespace. RSpec does <em>not</em>
behave this way, but it helps keep our example simple. Due to this,
we'll need to setup some of our variables:</p>

<p><code>ruby
@before_hooks = []
@after_hooks  = []
@examples     = []
</code></p>

<p>Additionally, we don't have any matchers defined yet. To keep it simple,
I'll add a TestUnit style <code>assert</code> matcher.</p>

<p><code>ruby
def assert(truthy)
  truthy or raise Error.new("Test failed.")
end
</code></p>

<p>At this point, I hope you can start to get the picture of how our
simplified example will run.  We'll setup our <code>run</code> as follows:</p>

<p>```ruby
def run
  raise 'No object under test defined.' unless @obj_under_test</p>

<p>  puts @obj_under_test
  return unless @test_group</p>

<p>  # Find out what tests need to be run
  @test_group.call</p>

<p>  # Run the tests
  @examples.each_with_index do |example, index|</p>

<pre><code>@subject = nil
puts "\n\nEXAMPLE #{index+1}:"
begin
  @before_hooks.each(&amp;:call)
  example.call
  puts "\n    #{example.description} =&gt; #{example.result.upcase}\n"
rescue =&gt; e
  puts "\n    #{example.description} =&gt; failed\n"
ensure
  @after_hooks.reverse_each(&amp;:call)
end
</code></pre>

<p>  end
end
```</p>

<p>If there is no object under test defined when we <code>run</code> (i.e. <code>describe</code>
was never called) then we raise an error. Otherwise, we output the
object under test. If this is a <code>class</code> (as is usual for a top level
<code>describe</code> block) then we will see the class name. Otherwise, the object
itself is output.  If it is a string, we'll get the string value,
otherwise, we'll get the object's <code>#to_s</code> representation.</p>

<p><em>It should be noted that in the real RSpec this outputting is much more
complicated and left up to various output formatters.</em></p>

<p>Next we will run the <code>test_group</code> (the body of the <code>describe</code> block). This
in turn call all our <code>before</code>, <code>after</code>, and <code>it</code> methods, which set up our
environment and define the examples.</p>

<p>All that is left, is to iterate over the examples and run them. Here I'm
using <code>each_with_index</code> solely to be able to add some debugging output
to make it a bit clearer how things are running. Normally, this would be
a simple <code>each</code> iterator.</p>

<p>Before each test run, we make sure we have a new empty <code>subject</code>. We
then iterate through each of the <code>before</code> blocks in the order they were
defined. At this point we run the example. After the example runs, I'm
immediately
outputting the results to keep things simple. In the real RSpec, this is
handled by an output formatter. Finally, all of the <code>after</code> hooks are
run, but in reverse defined order.</p>

<p>It should be noted, that here, as in the real RSpec, if any of the
<code>before</code> blocks throw an exception the test fails. However, failures in
any <code>after</code> block are ignored.</p>

<p>That's it. We can then use this to define our sample spec:</p>

<p>```ruby
class Thing
  attr_reader :my_value
  def initialize</p>

<pre><code>@my_value = rand 5
</code></pre>

<p>  end
end</p>

<p>describe Thing do
  before { puts "BEFORE_BLOCK:: First before block" }
  after do</p>

<pre><code>print "AFTER_BLOCK:: should be called last!"
print "    Reset @tmp_value(#{@tmp_value.inspect}) =&gt; "
@tmp_value = nil
puts "@tmp_value(#{@tmp_value.inspect})"
</code></pre>

<p>  end</p>

<p>  it 'has access to subject' do</p>

<pre><code>p subject
assert subject.my_value &lt; 5
</code></pre>

<p>  end</p>

<p>  it 'subject changes only between tests' do</p>

<pre><code>p subject
assert subject.equal?(subject)
</code></pre>

<p>  end</p>

<p>  it "fails on error" do</p>

<pre><code>raise Error.new 'Sad face'
</code></pre>

<p>  end</p>

<p>  it 'works!' do</p>

<pre><code>assert @tmp_value == 'test'
</code></pre>

<p>  end</p>

<p>  before do</p>

<pre><code>@tmp_value = 'test'
print "BEFORE_BLOCK:: Another before block"
puts "     Set @tmp_value(#{@tmp_value.inspect})"
</code></pre>

<p>  end</p>

<p>  it 'is pending'</p>

<p>  after { puts "AFTER_BLOCK:: should be called first!!" }
end
```</p>

<p>I hope it is clear how this spec will end up running. This is not
exactly equivalent to how RSpec will treat things (notice that we need
to explicitly clear <code>@tmp_value</code> in an <code>after</code> block, where RSpec will
do that for us). This is due to how RSpec creates example classses
(which we are not using) and how it binds the blocks to different
scopes; we are strictly using the <code>global</code> namespace to keep the example
simple.</p>

<p>Check out the gist for the code and output of the sample spec:
<a href="http://gist.github.com/4247624">http://gist.github.com/4247624</a></p>

<p>Stay tuned for more on RSpec in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[=== the Forgotten Equality]]></title>
    <link href="http://cupakromer.github.com/blog/2012-10-12-equals-equals-equals-the-forgotten-equality.html"/>
    <updated>2012-10-12T19:04:00-04:00</updated>
    <id>http://cupakromer.github.com/blog/equals-equals-equals-the-forgotten-equality</id>
    <content type="html"><![CDATA[<p>Recently I was looking for a way to do a comparison on a <code>String</code> with
either another <code>String</code> or a <code>Regexp</code>. Most of the discussions on equality
focused on <code>==</code>, <code>eql?</code>, <code>equal?</code>. None of which would satisfy the requirement.
So I was left with this code:</p>

<p>```ruby
def matches(compare_with)
  if compare_with.is_a?(Regexp)</p>

<pre><code>@data_string =~ compare_with
</code></pre>

<p>  else</p>

<pre><code>@data_string == compare_with
</code></pre>

<p>  end
end
```</p>

<p>I was less than thrilled. So I did what everyone does, I asked the internet.
Thanks to Twitter, specifically James Edward Gray II
<a href="https://twitter.com/jeg2">@JEG2</a> who btw completely rocks, I was pointed at
<code>===</code>. Though the documentation on <code>===</code> leaves something to be desired:</p>

<p>  <blockquote><p>Used to compare each of the items with the target in the <code>when</code> clause of<br/>  a <code>case</code> statement.</p><footer><strong>Dave Thomas, Programming Ruby 1.9, page 128</strong> <cite><a href='http://pragprog.com/book/ruby/programming-ruby'>pragprog.com/book/ruby/&hellip;</a></cite></footer></blockquote></p>

<ul>
<li>The <a href="http://ruby-doc.org/core-1.9.3/String.html#method-i-3D-3D-3D">String API</a>
sneakily directs you to <code>==</code> but doesn't outright state they are the same</li>
<li>The <a href="http://ruby-doc.org/core-1.9.3/Regexp.html#method-i-3D-3D-3D">Regexp API</a>
states it as a synonym for <a href="http://ruby-doc.org/core-1.9.3/Regexp.html#method-i-3D-7E"><code>Regexp#=~</code></a></li>
</ul>


<p>The thing to remember is with <code>case</code> when you have the following:</p>

<p><code>ruby
case thing
when other_thing
  # stuff
end
</code></p>

<p>You are just saying <code>other_thing === thing</code>. The comparison is performed with
the <code>when</code> expression as the lvalue.</p>

<p>This means I could rewrite the <code>matches</code> method as:</p>

<p><code>ruby
def matches(compare_with)
  compare_with === @data_string
end
</code></p>

<p>This also means it's possible to be more flexible on the match:</p>

<p>```ruby</p>

<h1>@data_string = "coding for fun"</h1>

<p>matches "oding"           # false
matches "coding for fun"  # true
matches /oding/           # true
matches String            # true
```</p>

<p>So, the next time you're thinking of writing some code that needs to
change based on class type or how something compares with something else, think
if a <code>case</code> statement applies. If it does, see if <code>===</code> works to produce better
code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Everyone Should Learn metaprogramming]]></title>
    <link href="http://cupakromer.github.com/blog/2012-08-14-everyone-should-learn-meta-programming.html"/>
    <updated>2012-08-14T17:54:00-04:00</updated>
    <id>http://cupakromer.github.com/blog/everyone-should-learn-meta-programming</id>
    <content type="html"><![CDATA[<p>A few weeks ago was the first <a href="http://steelcityrubyconf.org/">Steel City Ruby conference</a>.
It was a great conference and I would highly recommend you attend next
year. While there, I had the opportunity to give my first lightning talk.</p>

<p><a href="http://www.flickr.com/photos/charliekilo/7717397572/in/photostream"><img class="right" src="/images/scrc12_lightning_talk.jpg" width="391" height="287" title="12 Lightning Talk" alt="An image of me presenting at SCRC12"></a>
Now I'm not one for public speaking, in fact it's terrifying for me.
However, the Ruby community is awesome, friendly, and very encouraging.
After thinking about it for a while, talking with several people, and
reflecting on my time participating in <a href="http://scrappyacademy.com/">Scrappy Academy</a>,
I decided that it was important to speak up about metaprogramming.</p>

<p>I titled my talk: "<em>Demystifying Metaprogramming</em>." The intent was to
encourage those people who are afraid of "metaprogramming" to give it a
try. I strongly believe if you have been programming Ruby (or Rails -
this is just Ruby with a fun web framework) for more than two months,
you owe it to yourself to learn metaprogramming.</p>

<p>To most people, this included me, they hear about "metaprogramming" as
this advanced technique that should be avoided by all but the most
wizardly among us. Frankly, this big scary stigma attached to
metaprogramming just isn't warranted.</p>

<p><span class='pullquote-right' data-pullquote='&#8220;metaprogramming&#8221; is just
programming'>
I'll let you in on the big secret, "metaprogramming" is just
programming. Yep. It's not scary. It may be a bit complicated, but at
the end of the day it is well worth your time to learn. You may even find
it to be fun.
</span></p>

<p>To help ease you into the topic, we'll start with a simple contrived
example to demonstrate that you already know everything needed to get
started.</p>

<p><code>ruby
def say( phrase )
  puts phrase
end
</code></p>

<p>Yep. That's a really basic method. It simply <code>puts</code> the object that is
passed in. To use this method in <a href="http://en.wikipedia.org/wiki/Interactive_Ruby_Shell">irb</a>
or <a href="https://github.com/pry/pry">pry</a> we could simply:</p>

<p>```ruby</p>

<blockquote><p>def say( phrase )
*  puts phrase
* end
=> nil
say "Steel City Ruby I heard you like programming."
Steel City Ruby I heard you like programming.
=> nil
```</p></blockquote>

<p>This shouldn't be anything shocking so far. In fact, all we've done is
create a method that calls a method (<code>puts</code>) and pass it a parameter. In
fact, this concept is at the heart of the "meta" programming.</p>

<p>All you really are doing is writing methods, that call another method,
and pass it a parameter. It just so happens that the parameter you pass,
tends to be a block that defines a new method.</p>

<p><blockquote><p>Write a method, that calls a method, that creates a method.*</p></blockquote></p>

<p>So to extend our example and add the "meta" part to it, we'll just:</p>

<ul>
<li>Wrap our method in another method</li>
<li>Pass our method as the parameter to another method</li>
</ul>


<p>```ruby
def just_programming
  class_eval do</p>

<pre><code>def say( phrase )
  puts phrase
end
</code></pre>

<p>  end
end
```</p>

<p>In this case, we're using the special <a href="http://www.ruby-doc.org/core-1.9.3/Module.html#method-i-class_eval"><code>class_eval</code></a>
method. In a nutshell, this will change the value of <code>self</code> and then
execute the block in this context. In our case, we provide it a block
which contains the method definition we wish to dynmically create. The
trick here is that class definitions and methods are active code. So the
call to <code>def say( phrase )</code> is run just as if we had typed it directly
in the original class definition.</p>

<p>To be able to use this in a context more familiar, we'll just wrap this
in a module. We can then <code>extend</code> that module in our class and
dynamically create our method by using our class method
<code>just_programming</code>.</p>

<p>```ruby
module Meta
  def just_programming</p>

<pre><code>class_eval do
  def say( phrase )
    puts phrase
  end
end
</code></pre>

<p>  end
end</p>

<p>class Foo
  extend Meta
  just_programming
end</p>

<p>f = Foo.new
f.say "Steel City Ruby I heard you like programming."
=> "Steel City Ruby I heard you like programming."
```</p>

<p>I hope this has helped illustrate that "metaprogramming" is only
programming. It isn't anything to be afraid of. Sure, it can get
complicated at times, but then, what code concepts beyond the bare
basics can't?</p>

<p>You owe it to yourself to learn these nifty and fun coding techniques.
They will demystify manly things you think are "magic", provide a
deeper understanding of the Ruby language, and add tools to your
belt enabling you to write better code.</p>

<p>There are many resources on these topics if you do a search.
Additionally, <a href="http://pragprog.com/">The Pragmatic Bookshelf</a> has a
good set of resources on Ruby and metaprogramming. I found the
videos series on <a href="http://pragprog.com/screencasts/v-dtrubyom/the-ruby-object-model-and-metaprogramming">The Ruby Object Model and Metaprogramming</a>
very enlightening.</p>

<p>Happy programming!</p>

<p>* Technically, this should really be "Write a method, that <em>sends a
message</em>, that creates a method." However, I wanted to emphasise the
progression and went with this version.</p>
]]></content>
  </entry>
  
</feed>
